// Referenced from:
// https://css-tricks.com/snippets/sass/bem-mixins/
/// Block Element
/// @access public
/// @param {String} $element - Element's name
@mixin element($element) {
    &__#{$element} {
        @content;
    }
}

/// Block Modifier
/// @access public
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier) {
    &--#{$modifier} {
        @content;
    }
}

/// @alias element
@mixin e($element) {
    @include element($element) {
        @content;
    }
}

/// @alias modifier
@mixin m($modifier) {
    @include modifier($modifier) {
        @content;
    }
}

// Referenced from:
// https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
$breakpoints: (
    "small": (
        min-width: $breakpoint-small
    ),
    "medium": (
        min-width: $breakpoint-medium
    ),
    "large": (
        min-width: $breakpoint-large
    )
) !default;

/// Mixin to manage responsive breakpoints
/// @author Kitty Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

// reset list styles
@mixin resetListStyles {
    list-style: none;
    padding: 0;
    margin: 0;
}

// display flex
@mixin d-flex($direction: row, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

// background image
@mixin bg-image($image, $size: cover, $position: center, $repeat: no-repeat) {
    background-image: url($image);
    background-size: $size;
    background-position: $position;
    background-repeat: $repeat;
}

// box shadow
@mixin box-shadow(
    $inset: false,
    $x: 0,
    $y: 0,
    $blur: $border-radius-default,
    $spread: $border-radius-default,
    $color: $color-primary
) {
    // forInnerShadow offset-x offset-y blur-radius spread-radius color
    box-shadow: if($inset, inset, "") $x $y $blur $spread $color;
}
@mixin box-shadow-selected {
    @include box-shadow(true, 0, 0, $border-radius-default, $border-radius-default, $color-selected);
}
@mixin box-shadow-valid {
    @include box-shadow(true, 0, 0, $border-radius-medium, $border-radius-default, $color-valid);
}
@mixin box-shadow-capturable {
    @include box-shadow(true, 0, 0, $border-radius-medium, $border-radius-large, $color-capturable);
}
@mixin box-shadow-last-move {
    @include box-shadow(true, 0, 0, $border-radius-medium, $border-radius-default, $color-last-move);
}
@mixin box-shadow-hover {
    @include box-shadow(true, 0, 0, $border-radius-medium, $border-radius-default, $color-hover);
}

// background
@mixin background-checked {
    background: radial-gradient(
        ellipse at center,
        rgb(255, 0, 0) 0%,
        rgb(231, 0, 0) 25%,
        rgba(169, 0, 0, 0) 89%,
        rgba(158, 0, 0, 0) 100%
    );
}

// cursor
@mixin cursor-grab {
    cursor: move; /* fallback if grab cursor is unsupported */
    cursor: grab;
    cursor: -moz-grab;
    cursor: -webkit-grab;
}
@mixin cursor-grabbing {
    cursor: grabbing;
    cursor: -moz-grabbing;
    cursor: -webkit-grabbing;
}
